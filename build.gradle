plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.gb.contactmanagement'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'

configurations {
    querydsl.extendsFrom compileClasspath
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir "$buildDir/generated/source/main"
        }
    }
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

querydsl {
    jpa = true
    springDataMongo = true
    querydslSourcesDir = "$buildDir/generated/source/main"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

project.afterEvaluate {
    project.tasks.compileQuerydsl.options.compilerArgs = [
            "-proc:only",
            "-processor", project.querydsl.processors() +
                    ',lombok.launch.AnnotationProcessorHider$AnnotationProcessor'
    ]
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springdoc:springdoc-openapi-ui:1.3.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    compileOnly 'org.projectlombok:lombok'
    compile 'org.mongodb:mongo-java-driver'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor("com.querydsl:querydsl-apt")
    compile 'com.querydsl:querydsl-mongodb'
    compile 'com.querydsl:querydsl-jpa'
    compile 'com.querydsl:querydsl-apt'
    compileOnly 'com.mysema.querydsl:querydsl-apt:2.7.1'
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile('org.junit.jupiter:junit-jupiter-api')
    testCompile('org.junit.jupiter:junit-jupiter-engine')
}

ext {
    generatedSourcesDir = file("${buildDir}/generated-sources/javac/main/java")
}

// These are the only modifications to build process that are required.
compileJava {
    doFirst {
        // Directory should exists before compilation started.
        generatedSourcesDir.mkdirs()
    }
    // specify place to keep source files
    options.compilerArgs += ['-s', generatedSourcesDir]
}
test {
    useJUnitPlatform()
}
